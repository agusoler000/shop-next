generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
enum Size{
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}
enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  ADMIN
  USER
}

model Category{
  id String @id @default(uuid())
  name String @unique
  Product Product[]
}

model Product{
  id String @id @default(uuid())
  title String
  description String
  inStock Int
  price Float @default(0)
  sizes Size[] @default([])
  slug String @unique
  tags String[] @default([])   
  gender Gender

  category Category @relation(fields: [categoryId], references: [id])
  ProductImage ProductImage[]
  categoryId String

  @@index([gender])
  OrderItem OrderItem[]
}

model ProductImage {
  id Int @id @default(autoincrement())
  url String
  productId String
  product Product @relation(fields: [productId], references: [id])
}




model User{
  id String @id @default(uuid())
  email String @unique
  emailVerified DateTime?
  password String
  role Role @default(USER)
  name String
  image String?

  userAddress UserAddress?

  Order Order[]
}



model Country{
  id String @id @unique
  name String

  UserAddress UserAddress[]

  OrderAddress OrderAddress[]
}


model UserAddress{
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?  
  postalCode String
  phone String
  city String

  //relations
  countryId String
  country Country @relation(fields: [countryId], references: [id])

  userId String @unique
  user User @relation(fields: [userId], references: [id])
  

}


//ORDEN DE COMPRAS

model Order{
  id String @id @default(uuid())
  subtotal Float
  tax Float
  total Float
  itemsInOrder Int
  isPaid Boolean @default(false)
  paidAt DateTime?
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  userId String
  user User @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]

  OrderAddress OrderAddress?

  transactionId String?
}
model OrderItem {
  id String @id @default(uuid())
  quantity Int
  price Float
  size Size

  //relations
  order Order @relation(fields: [orderId], references: [id])
  orderId String

  product Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  postalCode String
  phone String
  city String

  //relations
  countryId String
  country Country @relation(fields: [countryId], references: [id])

  orderId String @unique
  order Order @relation(fields: [orderId], references: [id])
}
